//

#include"tosh.h"


//********************************************
//
//however base is what 
// 10 is A , 11 is B  , ... 
//
// base transformation functionn 
//

PRIVATE char* i2a(int val, int base, char ** ps)
{
	int m = val % base;
	int q = val / base;
	if (q) {
		i2a(q, base, ps);
	}
	*(*ps)++ = (m < 10) ? (m + '0') : (m - 10 + 'A');

	return *ps;
}



//*****************************************************
// return buf's length . 
//



int vsprintf(char *buf , const char *fmt , va_list args)
{

	char*	p;

	va_list	p_next_arg = args;
	int	m;

        char    inner_buf[STR_DEFAULT_LEN];
                                        //   #define	STR_DEFAULT_LEN	1024
	char	cs;
	int	align_nr;

	for (p=buf ; *fmt ; fmt++) {
		if (*fmt != '%') {
			*p++ = *fmt;
			continue;
		}
		else {		/* a format string begins */
			align_nr = 0;
		}

		fmt++;

		if (*fmt == '%') {
			*p++ = *fmt;
			continue;
		}
		else if (*fmt == '0') {
			cs = '0';
			fmt++;
		}
		else {
			cs = ' ';
		}


		while ( ((unsigned char)(*fmt) >= '0')  && ((unsigned char)(*fmt) <= '9')) {
			align_nr *= 10;
			align_nr += *fmt - '0';
			fmt++;
		}
                                        //fill up confirm 

		char * q = inner_buf;
		_str_set( q , 0 , sizeof(inner_buf) );
                                                    //sizeof for length of array 

		switch (*fmt) {
		case 'c':
			*q++ = *((char*)p_next_arg);
			p_next_arg += 4;
			break;
                                                //note " p_next_ary +=4 "
		case 'x':
			m = *((int*)p_next_arg);
			i2a(m, 16, &q);
			p_next_arg += 4;
			break;
		case 'd':
			m = *((int*)p_next_arg);
			if (m < 0) {
				m = m * (-1);
				*q++ = '-';
			}
                                                // negative number correct
			i2a(m, 10, &q);
			p_next_arg += 4;
			break;
		case 's':
			_str_cpy(q, (*((char**)p_next_arg)) , _str_len( * ((char**) p_next_arg))  );

			q += _str_len(*((char**)p_next_arg));   // what's this step ? 

			p_next_arg += 4;
			break;
		default:
			break;
		}

		int k;
		for (k = 0; k < ((align_nr > strlen(inner_buf)) ? (align_nr - strlen(inner_buf)) : 0); k++) {
			*p++ = cs;
		}
                                                //align with cs to fill up 
		q = inner_buf;
		while (*q) {
                                        // string seted 
			*p++ = *q++;
		}
	}

	*p = 0;

	return (p - buf);

}






//********************************************************
//
//  sprintf is argument dealing 
//

int sprintf(char *buf, const char *fmt, ...)
{
	va_list arg = (va_list)((char*)(&fmt) + 4);        /* 4 是参数 fmt 所占堆栈中的大小 */
	return vsprintf(buf, fmt, arg);
}
