//

#ifndef const_DGUU
#define const_DGUU

#define EXTERN extern
#define	PUBLIC		       // PUBLIC is the opposite of PRIVATE 
#define	PRIVATE	static	       // PRIVATE x  , limits the scope of x 

#define TRUE 1
#define FALSE 0


#define PRIVILEGE_KERNEL 0
#define PRIVILEGE_TASK 1
#define PRIVILEGE_USER 3

#define PRIVILEGE_USER2 2

#define	RPL_KRNL	SA_RPL0
#define	RPL_TASK	SA_RPL1
#define	RPL_USER	SA_RPL3


#define INT_M_CTL 0x20
#define INT_M_CTLMASK 0x21
#define INT_S_CTL 0xA0
#define INT_S_CTLMASK 0xA1




#define	GDT_SIZE 128
#define IDT_SIZE 256
#define LDT_SIZE 2



/* Hardware interrupts */
#define	NR_IRQ		16	/* Number of IRQs */
#define	CLOCK_IRQ	0
#define	KEYBOARD_IRQ	1
#define	CASCADE_IRQ	2	/* cascade enable for 2nd AT controller */
#define	ETHER_IRQ	3	/* default ethernet interrupt vector */
#define	SECONDARY_IRQ	3	/* RS232 interrupt vector for port 2 */
#define	RS232_IRQ	4	/* RS232 interrupt vector for port 1 */
#define	XT_WINI_IRQ	5	/* xt winchester */
#define	FLOPPY_IRQ	6	/* floppy disk */
#define	PRINTER_IRQ	7
#define	AT_WINI_IRQ	14	/* at winchester */




#define NR_SYS_CALL 2


/* TTY */
#define NR_CONSOLES	3	/* consoles */



//VGA

#define	V_MEM_BASE	0xB8000	/* base of color video memory */
#define	V_MEM_SIZE	0x8000	/* 32K: B8000H -> BFFFFH */

/* Color */
/*
 * e.g. MAKE_COLOR(BLUE, RED)
 *      MAKE_COLOR(BLACK, RED) | BRIGHT
 *      MAKE_COLOR(BLACK, RED) | BRIGHT | FLASH
 */
#define BLACK   0x0     /* 0000 */
#define WHITE   0x7     /* 0111 */
#define RED     0x4     /* 0100 */
#define GREEN   0x2     /* 0010 */
#define BLUE    0x1     /* 0001 */
#define FLASH   0x80    /* 1000 0000 */
#define BRIGHT  0x08    /* 0000 1000 */
#define MAKE_COLOR(x,y) (x | y) /* MAKE_COLOR(Background,Foreground) */



#define INDEX_FLATC_R3 (INDEX_LDT_FIRST + NR_TASKS + 1 )
#define INDEX_FLATRW_R3 (INDEX_FLATC_R3 + 1 ) 
#define INDEX_GATE_R3TOR0 (INDEX_FLATRW_R3 + 1 ) 








#define MAG_CH_PANIC	'\002'
#define MAG_CH_ASSERT	'\003'








#define	STR_DEFAULT_LEN	1024




//***********************************************************

/* the assert macro */

#define ASSERT
#ifdef ASSERT
void assertion_failure(char *exp, char *file, char *base_file, int line);


#define assert(exp)  if (exp) ; \
        else assertion_failure(#exp, __FILE__, __BASE_FILE__, __LINE__)

//
// __FILE__ 将被展开成当前输入的文件名 字符串
// __BASE_FILE_ 比如你在 m.c 中包含了 n.h , 而 n.h中的某一个assert函数失败了 , 
//               则 __FILE__为 n.h , __BASE_FILE__ 为 m.c
//
// __LINE__ 将被展开成当前的行号 . 
// 
//
//  


#else
#define assert(exp)
#endif

//******************************************************





//*************************************************
//
//  proc2pid macro 
//
#define proc2pid(x) (x - proc_table)
//
//



#define ANY		(NR_TASKS + NR_PROCS + 10)
#define NO_TASK		(NR_TASKS + NR_PROCS + 20)





/* Process */
#define SENDING   0x02	/* set when proc trying to send */
#define RECEIVING 0x04	/* set when proc trying to recv */



/* ipc */
#define SEND		1
#define RECEIVE		2
#define BOTH		3	/* BOTH = (SEND | RECEIVE) */



#endif

//0950D616
//negiup
